import { Pool } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
import * as schema from "../shared/schema.js";
import { eq, desc, and, or, count, sql, ilike } from "drizzle-orm";

/**
 * Crea un storage específico para la base de datos tenant del request
 */
export function createTenantStorage(tenantDb: any, storeId: number) {
  return {
    // ========================================
    // ORDERS
    // ========================================
    async getAllOrders() {
      try {
        return await tenantDb.select()
          .from(schema.orders)
          .where(eq(schema.orders.storeId, storeId))
          .orderBy(desc(schema.orders.createdAt));
      } catch (error) {
        console.error('Error getting all orders:', error);
        return [];
      }
    },

    async getOrderById(id: number) {
      try {
        const [order] = await tenantDb.select()
          .from(schema.orders)
          .where(
            and(
              eq(schema.orders.id, id),
              eq(schema.orders.storeId, storeId)
            )
          )
          .limit(1);
        return order || null;
      } catch (error) {
        console.error('Error getting order by ID:', error);
        return null;
      }
    },

    async createOrder(orderData: any, items: any[] = []) {
      try {
        // Asegurar que el storeId esté incluido
        const orderWithStore = {
          ...orderData,
          storeId: storeId,
          createdAt: new Date()
        };

        // Insertar la orden
        const [order] = await tenantDb.insert(schema.orders)
          .values(orderWithStore)
          .returning();

        // Insertar los items si existen
        if (items && items.length > 0) {
          const itemsWithOrderId = items.map(item => ({
            ...item,
            orderId: order.id,
            storeId: storeId
          }));
          await tenantDb.insert(schema.orderItems).values(itemsWithOrderId);
        }

        return order;
      } catch (error) {
        console.error('Error creating order:', error);
        throw error;
      }
    },

    async updateOrder(id: number, orderData: any) {
      try {
        const [order] = await tenantDb.update(schema.orders)
          .set({ ...orderData, updatedAt: new Date() })
          .where(
            and(
              eq(schema.orders.id, id),
              eq(schema.orders.storeId, storeId)
            )
          )
          .returning();
        return order;
      } catch (error) {
        console.error('Error updating order:', error);
        throw error;
      }
    },

    async deleteOrder(id: number) {
      try {
        await tenantDb.delete(schema.orders)
          .where(
            and(
              eq(schema.orders.id, id),
              eq(schema.orders.storeId, storeId)
            )
          );
      } catch (error) {
        console.error('Error deleting order:', error);
        throw error;
      }
    },

    // ========================================
    // PRODUCTS
    // ========================================
    async getAllProducts() {
      try {
        return await tenantDb.select()
          .from(schema.products)
          .where(eq(schema.products.storeId, storeId))
          .orderBy(desc(schema.products.createdAt));
      } catch (error) {
        console.error('Error getting all products:', error);
        return [];
      }
    },

    async getProductById(id: number) {
      try {
        const [product] = await tenantDb.select()
          .from(schema.products)
          .where(
            and(
              eq(schema.products.id, id),
              eq(schema.products.storeId, storeId)
            )
          )
          .limit(1);
        return product || null;
      } catch (error) {
        console.error('Error getting product by ID:', error);
        return null;
      }
    },

    async createProduct(productData: any) {
      try {
        const [product] = await tenantDb.insert(schema.products)
          .values({
            ...productData,
            storeId: storeId,
            createdAt: new Date()
          })
          .returning();
        return product;
      } catch (error) {
        console.error('Error creating product:', error);
        throw error;
      }
    },

    async updateProduct(id: number, productData: any) {
      try {
        const [product] = await tenantDb.update(schema.products)
          .set({ ...productData, updatedAt: new Date() })
          .where(
            and(
              eq(schema.products.id, id),
              eq(schema.products.storeId, storeId)
            )
          )
          .returning();
        return product;
      } catch (error) {
        console.error('Error updating product:', error);
        throw error;
      }
    },

    // ========================================
    // CUSTOMERS
    // ========================================
    async getAllCustomers() {
      try {
        return await tenantDb.select()
          .from(schema.customers)
          .where(eq(schema.customers.storeId, storeId))
          .orderBy(desc(schema.customers.createdAt));
      } catch (error) {
        console.error('Error getting all customers:', error);
        return [];
      }
    },

    async getCustomerById(id: number) {
      try {
        const [customer] = await tenantDb.select()
          .from(schema.customers)
          .where(
            and(
              eq(schema.customers.id, id),
              eq(schema.customers.storeId, storeId)
            )
          )
          .limit(1);
        return customer || null;
      } catch (error) {
        console.error('Error getting customer by ID:', error);
        return null;
      }
    },

    async getCustomerByPhone(phoneNumber: string) {
      try {
        const [customer] = await tenantDb.select()
          .from(schema.customers)
          .where(
            and(
              eq(schema.customers.phoneNumber, phoneNumber),
              eq(schema.customers.storeId, storeId)
            )
          )
          .limit(1);
        return customer || null;
      } catch (error) {
        console.error('Error getting customer by phone:', error);
        return null;
      }
    },

    async createCustomer(customerData: any) {
      try {
        const [customer] = await tenantDb.insert(schema.customers)
          .values({
            ...customerData,
            storeId: storeId,
            createdAt: new Date()
          })
          .returning();
        return customer;
      } catch (error) {
        console.error('Error creating customer:', error);
        throw error;
      }
    },

    async updateCustomer(id: number, customerData: any) {
      try {
        const [customer] = await tenantDb.update(schema.customers)
          .set({ ...customerData, updatedAt: new Date() })
          .where(
            and(
              eq(schema.customers.id, id),
              eq(schema.customers.storeId, storeId)
            )
          )
          .returning();
        return customer;
      } catch (error) {
        console.error('Error updating customer:', error);
        throw error;
      }
    },

    // ========================================
    // USERS
    // ========================================
    async getAllUsers() {
      try {
        return await tenantDb.select()
          .from(schema.users)
          .where(eq(schema.users.storeId, storeId))
          .orderBy(desc(schema.users.createdAt));
      } catch (error) {
        console.error('Error getting all users:', error);
        return [];
      }
    },

    async getUserById(id: number) {
      try {
        const [user] = await tenantDb.select()
          .from(schema.users)
          .where(
            and(
              eq(schema.users.id, id),
              eq(schema.users.storeId, storeId)
            )
          )
          .limit(1);
        return user || null;
      } catch (error) {
        console.error('Error getting user by ID:', error);
        return null;
      }
    },

    async updateUser(id: number, userData: any) {
      try {
        const [user] = await tenantDb.update(schema.users)
          .set({ ...userData, updatedAt: new Date() })
          .where(
            and(
              eq(schema.users.id, id),
              eq(schema.users.storeId, storeId)
            )
          )
          .returning();
        return user;
      } catch (error) {
        console.error('Error updating user:', error);
        throw error;
      }
    },

    // ========================================
    // NOTIFICATIONS
    // ========================================
    async getUserNotifications(userId: number) {
      try {
        return await tenantDb.select()
          .from(schema.notifications)
          .where(
            and(
              eq(schema.notifications.userId, userId),
              eq(schema.notifications.storeId, storeId)
            )
          )
          .orderBy(desc(schema.notifications.createdAt));
      } catch (error) {
        console.error('Error getting user notifications:', error);
        return [];
      }
    },

    async getUnreadNotifications(userId: number) {
      try {
        return await tenantDb.select()
          .from(schema.notifications)
          .where(
            and(
              eq(schema.notifications.userId, userId),
              eq(schema.notifications.storeId, storeId),
              eq(schema.notifications.isRead, false)
            )
          )
          .orderBy(desc(schema.notifications.createdAt));
      } catch (error) {
        console.error('Error getting unread notifications:', error);
        return [];
      }
    },

    async getNotificationCounts(userId: number) {
      try {
        // Obtener todas las notificaciones del usuario
        const allNotifications = await tenantDb.select()
          .from(schema.notifications)
          .where(
            and(
              eq(schema.notifications.userId, userId),
              eq(schema.notifications.storeId, storeId)
            )
          );

        // Contar no leídas
        const unreadNotifications = allNotifications.filter(n => !n.isRead);

        return {
          total: allNotifications.length,
          unread: unreadNotifications.length
        };
      } catch (error) {
        console.error('Error getting notification counts:', error);
        return { total: 0, unread: 0 };
      }
    },

    async createNotification(notificationData: any) {
      try {
        const [notification] = await tenantDb.insert(schema.notifications)
          .values({
            ...notificationData,
            storeId: storeId,
            isRead: false,
            createdAt: new Date()
          })
          .returning();
        return notification;
      } catch (error) {
        console.error('Error creating notification:', error);
        throw error;
      }
    },

    async markNotificationAsRead(id: number) {
      try {
        const [notification] = await tenantDb.update(schema.notifications)
          .set({ isRead: true, updatedAt: new Date() })
          .where(
            and(
              eq(schema.notifications.id, id),
              eq(schema.notifications.storeId, storeId)
            )
          )
          .returning();
        return notification;
      } catch (error) {
        console.error('Error marking notification as read:', error);
        throw error;
      }
    },

    async markAllNotificationsAsRead(userId: number) {
      try {
        await tenantDb.update(schema.notifications)
          .set({ isRead: true, updatedAt: new Date() })
          .where(
            and(
              eq(schema.notifications.userId, userId),
              eq(schema.notifications.storeId, storeId)
            )
          );
      } catch (error) {
        console.error('Error marking all notifications as read:', error);
        throw error;
      }
    },

    async deleteNotification(id: number) {
      try {
        await tenantDb.delete(schema.notifications)
          .where(
            and(
              eq(schema.notifications.id, id),
              eq(schema.notifications.storeId, storeId)
            )
          );
      } catch (error) {
        console.error('Error deleting notification:', error);
        throw error;
      }
    }
  };
}